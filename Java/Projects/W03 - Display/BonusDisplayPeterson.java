/*
* THIS CODE IS AN ORIGINAL PRODUCTION OF THE AUTHOR STATED BELOW (Tim Peterson).
*        AUTHOR:    Tim Peterson
*    ASSIGNMENT:    "Display TEENS TENSE" - CSCI 0012
*      DUE DATE:    08 Sep 24
*    SELF GRADE:    100 points (100%)
* JUSTIFICATION:    This bonus file takes a string and prints the letters to the command window in a large way! I had
* to look up what the equivalent of a "dictionary" from Python is in Java, but other than that this is still completely
* my work (I even designed and tabulated all the pixel art letters & symbols myself!).
*/

import java.util.HashMap;

/**
 * This code takes a user-generated string "UserInput" and prints it to the command window in large pretty letters.
 * The user can change what the letters look like based on the "CharBlock" and "EmptyBlock" values.
 * All the values stored in letterCodeMap() were hand drawn/created by me.
 */
public class BonusDisplayPeterson {
     public static void main(String[] args) {

          // this value is the string that gets turned into the output
          String UserInput = "Hello World!";
          // this string is the line break between letters, if desired (may help with clarity)
          String LineBreak = "..............................";

          // gather data from "dictionary"
          HashMap<Character, String> LetterArray = letterCodeMap();
          System.out.println(LineBreak + "\n");
          // split up user string into individual letters
          for (int i = 0; i < UserInput.length(); i++) {
               String CodeStr = LetterArray.get(UserInput.charAt(i));
               // print each row of the current letter, then the line break
               for (int j = 0; j < 5; j++) {
                    System.out.println(printCharacter(CodeStr.charAt(j)));
               }
               System.out.println(LineBreak + "\n");
          }
     }

     /**
      * This method converts the code generated by letterCodeMap and converts it to a string to output to the command
      * line.
      * @param letter_string generated from letterCodeMap()
      * @return a string that is an enlarged version of the letter entered into letterCodeMap()
      */
     public static String printCharacter(Character letter_string) {
          // change this to be what the characters are made from
          String CharBlock  = "[||||]";
          // change this to what goes in the blank spaces within the letters
          String EmptyBlock = "      ";
          // it is recommended that CharBlock and EmptyBlock are the same length, but experiment as you wish!

          return switch (letter_string) {
              case '1':
                   yield CharBlock + EmptyBlock + EmptyBlock + "\n";
              case '2':
                   yield EmptyBlock + CharBlock + EmptyBlock + "\n";
              case '3':
                   yield CharBlock + CharBlock + EmptyBlock + "\n";
              case '4':
                   yield EmptyBlock + EmptyBlock + CharBlock + "\n";
              case '5':
                   yield CharBlock + EmptyBlock + CharBlock + "\n";
              case '6':
                   yield EmptyBlock + CharBlock + CharBlock + "\n";
              case '7':
                   yield CharBlock + CharBlock + CharBlock + "\n";
              default:
                   yield EmptyBlock + EmptyBlock + EmptyBlock + "\n";
         };
     }

     /**
      * This method contains the "dictionary" of codes that convert a letter, number, or symbol to a code that will
      * eventually be converted into a larger version in the form of ASCII Art.
      * @return a 5-digit number String representing the code for printCharacter() to convert
      */
     public static HashMap<Character, String> letterCodeMap() {
          HashMap<Character, String> decodex = new HashMap<>();
          decodex.put('A' , "25755");
          decodex.put('a' , "00656");
          decodex.put('B' , "76753");
          decodex.put('b' , "11353");
          decodex.put('C' , "61116");
          decodex.put('c' , "00616");
          decodex.put('D' , "35553");
          decodex.put('d' , "44656");
          decodex.put('E' , "71317");
          decodex.put('e' , "02536");
          decodex.put('F' , "71311");
          decodex.put('f' , "42722");
          decodex.put('G' , "61552");
          decodex.put('g' , "02563");
          decodex.put('H' , "55755");
          decodex.put('h' , "11355");
          decodex.put('I' , "72227");
          decodex.put('i' , "02022");
          decodex.put('J' , "44452");
          decodex.put('j' , "40452");
          decodex.put('K' , "55355");
          decodex.put('k' , "11535");
          decodex.put('L' , "11117");
          decodex.put('l' , "32224");
          decodex.put('M' , "57755");
          decodex.put('m' , "00775");
          decodex.put('N' , "75555");
          decodex.put('n' , "00355");
          decodex.put('O' , "75557");
          decodex.put('o' , "00252");
          decodex.put('P' , "75711");
          decodex.put('p' , "02531");
          decodex.put('Q' , "75534");
          decodex.put('q' , "02564");
          decodex.put('R' , "75355");
          decodex.put('r' , "00351");
          decodex.put('S' , "61243");
          decodex.put('s' , "06363");
          decodex.put('T' , "72222");
          decodex.put('t' , "02726");
          decodex.put('U' , "55557");
          decodex.put('u' , "00556");
          decodex.put('V' , "55552");
          decodex.put('v' , "00552");
          decodex.put('W' , "55775");
          decodex.put('w' , "00577");
          decodex.put('X' , "55255");
          decodex.put('x' , "00525");
          decodex.put('Y' , "55222");
          decodex.put('y' , "05643");
          decodex.put('Z' , "74217");
          decodex.put('z' , "06633");
          decodex.put('0' , "75257");
          decodex.put('1' , "23227");
          decodex.put('2' , "34217");
          decodex.put('3' , "34243");
          decodex.put('4' , "55744");
          decodex.put('5' , "71743");
          decodex.put('6' , "22152");
          decodex.put('7' , "74222");
          decodex.put('8' , "25252");
          decodex.put('9' , "75744");
          decodex.put(' ' , "00000");
          decodex.put('.' , "00001");
          decodex.put(',' , "00021");
          decodex.put(':' , "02020");
          decodex.put(';' , "02021");
          decodex.put('-' , "00700");
          decodex.put('_' , "00007");
          decodex.put('!' , "11101");
          decodex.put('?' , "34202");
          decodex.put('/' , "46231");
          decodex.put('\\' , "13264");
          decodex.put('|' , "22222");
          decodex.put('(' , "63136");
          decodex.put(')' , "36463");
          decodex.put('[' , "62226");
          decodex.put(']' , "32223");
          decodex.put('{' , "46364");
          decodex.put('}' , "13631");
          decodex.put('<' , "42124");
          decodex.put('>' , "12421");
          decodex.put('+' , "02720");
          decodex.put('*' , "21000");
          decodex.put('=' , "07070");
          decodex.put('&' , "66337");
          decodex.put('$' , "63763");
          decodex.put('%' , "54215");
          return decodex;
     }
}
